#+TITLE: Apprentissage par renforcement
#+AUTHOR: Mathieu E, Oscar B, Paul C
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

* Git

#+ATTR_HTML: :title Le git du projet
[[https://gitlab.isima.fr/osbuon/projet-jeu]]

* DrAIving School (nom non-contractuel)

** Principe

Le but du jeu est de rouler vers l'arrivée le plus vite possible sans faire d'accident.
Il y a une autoroute à 3 voies par sens clairsemée de voitures qui roulent plus ou moins vite selon la voie.
La voiture du joueur peut accélérer, freiner, et tourner à gauche ou à droite. Il est important de noter que la voiture du joueur est plus rapide que toute autre voiture, même à vitesse minimale.

INSERER IMAGE JEU



** IA

Pour entraîner l'IA, nous avons essayé différents paramètres et méthodes, différentes perceptions et différentes récompenses et pénalités :



*** Perceptions

Nous avons doté l'IA d'une perception du monde très locale pour éviter une surcharge d'états différents à gérer.
Elle peut donc détecter les obstacles autour d'elle dans des zones de taille différentes.

INSERER IMAGE PERCEPTIONS/HITBOX


*** Score

Pour les pénalités : en cas d'accident, l'IA perd XXX points, peu importe si elle a cogné le trottoir ou une autre voiture.

En revanche, elle gagne ensuite des points lorsqu'elle atteint la fin du niveau. Ces points sont plus ou moins élevés en fonction du temps de la course, pour encourager l'IA à accélérer quand possible.
L'intérêt de ceci est que l'IA devra alors contrôler son accélération et jauger quand il est judicieux de vouloir se dépécher.

INSERER IMAGE SCORE


*** Paramètres/Méthodes

La quasi-totalité des choix d'actions ont été fait par E-Greedy.

Nous avons pris E = 0.99, et l'avons multiplié par ce nombre 1000 de manière équitable pendant l'apprentissage. E est alors de l'ordre de 10^-5 à la fin.

Pour Y, nous ne savions pas exactement comment il fonctionnait avant qu'un professeur ne nous l'explique, nous le prenions alors de manière aléatoire, puis finalement, nous l'avons laissé à 0.99 au vu des conseils donnés.

De même pour S, que nous avons finalement laissé à 0.01.


Pour l'apprentissage, beaucoup ont été réalisés par Q-Learning et quelques autres par SARSA.



** Résultats

*** IA intéressantes

**** Premières IA

Les premiers essais montraient un apprentissage, mais pas dans la direction que nous voulions...
Il en résulte une IA suicidaire qui minimise alors son temps de survie et qui s'en vanterait presque.

TEST PREMIERES IA

**** Premières IA performantes

Après beaucoup de changements de paramètres, d'entraînements différents, de modifications de codes, nous avons réussi à avoir quelques IA avec un comportement remarquable comparé aux autres.

TEST PREMIERES IA PERFORMANTES

*** Limites des perceptions

Le problème d'avoir des perceptions locales sont qu'elles sont locales (oui) : si l'IA est face à un bouchon, elle ne peut savoir s'il y a de la place libre sur les côtés, et ne pensera même pas à y aller.
De plus, des perceptions aussi larges que les notres peuvent provoquer des confusions chez l'IA qui peut voir un bouchon même quand 2 voitures sont assez espacées pour que l'IA passe entre.


INSERER IMAGE BOUCHON/FAUX BOUCHON

*** Limites du jeu

Le premier problème est lié aux perceptions locales de l'IA : si par faute du hasard, il y a un bouchon car les voitures sont toutes alignées, l'IA ne pourra rien faire car son monde est bloqué.
Une idée venue un peu tard était de faire des groupements de voitures générées aléatoirement avec comme règle que l'IA peut toujours passer entre. Le problème restait cependant les perceptions locales de l'IA qui ne détectait pas le passage.
